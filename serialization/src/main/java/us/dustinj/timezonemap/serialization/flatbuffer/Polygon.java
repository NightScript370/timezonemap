// automatically generated by the FlatBuffers compiler, do not modify

package us.dustinj.timezonemap.serialization.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Polygon extends Table {
  public static Polygon getRootAsPolygon(ByteBuffer _bb) { return getRootAsPolygon(_bb, new Polygon()); }
  public static Polygon getRootAsPolygon(ByteBuffer _bb, Polygon obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Polygon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Point region(int j) { return region(new Point(), j); }
  public Point region(Point obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o) + j * 8, bb) : null; }
  public int regionLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createPolygon(FlatBufferBuilder builder,
      int regionOffset) {
    builder.startObject(1);
    Polygon.addRegion(builder, regionOffset);
    return Polygon.endPolygon(builder);
  }

  public static void startPolygon(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addRegion(FlatBufferBuilder builder, int regionOffset) { builder.addOffset(0, regionOffset, 0); }
  public static void startRegionVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 4); }
  public static int endPolygon(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

